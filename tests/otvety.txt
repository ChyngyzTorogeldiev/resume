Наследование – важная составляющая объектно-ориентированного программирования.
Так или иначе мы уже сталкивались с ним, ведь объекты наследуют атрибуты своих классов.
Однако обычно под наследованием в ООП понимается наличие классов и подклассов. Также их называют
супер- или надклассами и классами, а также родительскими и дочерними классами.

Суть наследования здесь схожа с наследованием объектами от классов. Дочерние классы наследуют
атрибуты родительских, а также могут переопределять атрибуты и добавлять свои.


Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным).
Инкапсуляция делает некоторые из компонент доступными только внутри класса. Инкапсуляция в Python
работает лишь на уровне соглашения между программистами о том, какие атрибуты являются общедоступными,
а какие — внутренними.



Полиморфизм — очень важная идея в программировании. Она заключается в использовании единственной
сущности(метод, оператор или объект) для представления различных типов в различных сценариях использования.


Абстракции - это та особенность Python, которой мне будет очень сильно недоставать, если я сменю язык
программирования. Абстракции - это конструкторы, позволяющие создавать последовательности из других
последовательностей. В Python (2 и 3) есть три типа подобных абстракций:
абстракции списков
абстракции словарей
абстракции множеств
абстракции генераторов
Мы обсудим все три, хотя освоив абстракции списков вы легко перенесёте знания на остальные типы.


Композиция — это концепция, которая моделирует отношения. Она позволяет создавать сложные типы,
комбинируя объекты других типов. Это означает, что класс Composite может содержать объект другого
класса Component.


Итератор (iterator) - это объект, который возвращает свои элементы по одному за раз.
С точки зрения Python - это любой объект, у которого есть метод __next__ . Этот метод возвращает
следующий элемент, если он есть, или возвращает исключение StopIteration, когда элементы закончились.


С другой стороны, объекты-генераторы - это особые объекты-функции, которые между вызовами сохраняют
свое состояние. В цикле for они ведут себя подобно итерируемым объектам, к которым относятся списки,
словари, строки и др. Однако генераторы поддерживают метод __next__(), а значит являются разновидностью
итераторов. 


Метаклассы – это такие классы, экземпляры которых сами являются классами. Подобно тому,
как «обычный» класс определяет поведение экземпляров класса, метакласс определяет и
поведение классов, и поведение их экземпляров.

Метаклассы поддерживаются не всеми объектно-ориентированными языками программирования.
Те языки программирования, которые их поддерживают, значительно отличаются по способу 
их реализации. Но в Python метаклассы есть.


В Python так называемые миксины — это классы, которые живут в обычном дереве наследования, 
но они остаются небольшими, чтобы избежать создания иерархий, которые слишком сложны для
понимания программистом. В частности, миксины не должны иметь общих предков, кроме объекта, 
с другими родительскими классами.


Оператор class создает новое определение класса. Имя класса сразу следует за ключевым
словом class, после которого ставиться двоеточие:
class ClassName:
   """Необязательная строка документации класса"""  
   class_suite
У класса есть строка документации, к которой можно получить доступ через ClassName.__doc__.
class_suite состоит из частей класса, атрибутов данных и функции.




